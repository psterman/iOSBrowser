//
//  BrowserView.swift
//  iOSBrowser
//
//  Created by LZH on 2025/7/19.
//

import SwiftUI
import UIKit
import WebKit
import Foundation

// 全局Prompt数据结构
struct SavedPrompt: Identifiable, Codable, Equatable {
    let id: UUID
    let content: String
    let name: String
    let timestamp: Date

    init(content: String, name: String) {
        self.id = UUID()
        self.content = content
        self.name = name
        self.timestamp = Date()
    }

    static func == (lhs: SavedPrompt, rhs: SavedPrompt) -> Bool {
        return lhs.id == rhs.id
    }
}

// 全局Prompt管理器
class GlobalPromptManager: ObservableObject {
    static let shared = GlobalPromptManager()

    @Published var savedPrompts: [SavedPrompt] = []
    @Published var currentPrompt: SavedPrompt?

    private init() {
        loadPrompts()
    }

    func savePrompt(_ content: String, name: String) {
        let prompt = SavedPrompt(content: content, name: name)
        savedPrompts.append(prompt)
        currentPrompt = prompt
        savePrompts()
    }

    func deletePrompt(_ id: UUID) {
        savedPrompts.removeAll { $0.id == id }
        if currentPrompt?.id == id {
            currentPrompt = savedPrompts.first
        }
        savePrompts()
    }

    func setCurrentPrompt(_ prompt: SavedPrompt) {
        currentPrompt = prompt
        UserDefaults.standard.set(prompt.id.uuidString, forKey: "currentPromptId")
    }

    private func savePrompts() {
        if let data = try? JSONEncoder().encode(savedPrompts) {
            UserDefaults.standard.set(data, forKey: "savedPrompts")
        }

        if let current = currentPrompt {
            UserDefaults.standard.set(current.id.uuidString, forKey: "currentPromptId")
        }
    }

    private func loadPrompts() {
        if let data = UserDefaults.standard.data(forKey: "savedPrompts"),
           let decoded = try? JSONDecoder().decode([SavedPrompt].self, from: data) {
            savedPrompts = decoded

            // 加载当前选中的Prompt
            if let currentId = UserDefaults.standard.string(forKey: "currentPromptId"),
               let uuid = UUID(uuidString: currentId),
               let current = savedPrompts.first(where: { $0.id == uuid }) {
                currentPrompt = current
            } else {
                currentPrompt = savedPrompts.first
            }
        }
    }
}

struct BrowserSearchEngine {
    let id: String
    let name: String
    let url: String
    let icon: String
    let color: Color
}

struct BrowserView: View {
    @ObservedObject var viewModel: WebViewModel

    @State private var urlText: String = ""
    @State private var showingBookmarks = false
    @State private var selectedSearchEngine = 0
    @State private var bookmarks: [String] = []
    @State private var showingCustomHomePage = true
    @State private var searchQuery = ""
    @State private var showingFloatingPrompt = false
    @State private var showingPromptManager = false
    
    // 新增：左侧抽屉式搜索引擎列表状态
    @State private var showingSearchEngineDrawer = false
    @State private var searchEngineDrawerOffset: CGFloat = -300
    
    // 新增功能状态
    @State private var showingExpandedInput = false
    @State private var expandedUrlText = ""
    @State private var showingAIChat = false
    @State private var selectedAI = "deepseek"
    @State private var showingAlert = false
    @State private var alertMessage = ""
    @State private var favoritePages: Set<String> = []
    
    // 新增：弱提醒状态
    @State private var showingToast = false
    @State private var toastMessage = ""
    @State private var toastType: ToastType = .success
    
    // 新增：工具栏按钮放大和文字提示状态
    @State private var showingToolbarButtonHints = true // 是否显示工具栏按钮提示
    @State private var pressedButtonId: String? = nil // 当前按下的按钮ID

    // 边缘滑动返回手势状态
    @State private var edgeSwipeOffset: CGFloat = 0
    @State private var isEdgeSwiping = false

    // 全局Prompt状态管理
    @StateObject private var promptManager = GlobalPromptManager.shared

    // 新增：Toast类型枚举
    enum ToastType {
        case success, error, info
        
        var color: Color {
            switch self {
            case .success: return .green
            case .error: return .red
            case .info: return .blue
            }
        }
        
        var icon: String {
            switch self {
            case .success: return "checkmark.circle.fill"
            case .error: return "xmark.circle.fill"
            case .info: return "info.circle.fill"
            }
        }
    }

    private let searchEngines = [
        BrowserSearchEngine(id: "baidu", name: "百度", url: "https://www.baidu.com/s?wd=", icon: "magnifyingglass", color: .green),
        BrowserSearchEngine(id: "bing", name: "必应", url: "https://www.bing.com/search?q=", icon: "magnifyingglass.circle", color: .green),
        BrowserSearchEngine(id: "deepseek", name: "DeepSeek", url: "https://chat.deepseek.com/", icon: "brain.head.profile", color: .green),
        BrowserSearchEngine(id: "kimi", name: "Kimi", url: "https://kimi.moonshot.cn/", icon: "moon.stars", color: .green),
        BrowserSearchEngine(id: "doubao", name: "豆包", url: "https://www.doubao.com/chat/", icon: "bubble.left.and.bubble.right", color: .green),
        BrowserSearchEngine(id: "wenxin", name: "文心一言", url: "https://yiyan.baidu.com/", icon: "doc.text", color: .green),
        BrowserSearchEngine(id: "yuanbao", name: "元宝", url: "https://yuanbao.tencent.com/", icon: "diamond", color: .green),
        BrowserSearchEngine(id: "chatglm", name: "智谱清言", url: "https://chatglm.cn/main/gdetail", icon: "lightbulb.fill", color: .green),
        BrowserSearchEngine(id: "tongyi", name: "通义千问", url: "https://tongyi.aliyun.com/qianwen/", icon: "cloud.fill", color: .green),
        BrowserSearchEngine(id: "claude", name: "Claude", url: "https://claude.ai/chats", icon: "sparkles", color: .green),
        BrowserSearchEngine(id: "chatgpt", name: "ChatGPT", url: "https://chat.openai.com/", icon: "bubble.left.and.bubble.right.fill", color: .green),
        BrowserSearchEngine(id: "metaso", name: "秘塔", url: "https://metaso.cn/", icon: "lock.shield", color: .green),
        BrowserSearchEngine(id: "nano", name: "纳米搜索", url: "https://bot.n.cn/", icon: "atom", color: .green)
    ]
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // 固定顶部工具栏
                if viewModel.isUIVisible {
                    VStack(spacing: 8) {
                        // URL输入栏
                        HStack(spacing: 8) {
                            // 搜索引擎选择按钮 - 改为触发左侧抽屉
                            Button(action: {
                                withAnimation(.spring(response: 0.3, dampingFraction: 0.7)) {
                                    showingSearchEngineDrawer = true
                                    searchEngineDrawerOffset = 0
                                }
                            }) {
                                HStack(spacing: 6) {
                                    Image(systemName: searchEngines[selectedSearchEngine].icon)
                                        .foregroundColor(searchEngines[selectedSearchEngine].color)
                                        .font(.system(size: 16, weight: .medium))
                                        .frame(width: 20, height: 20)
                                        .clipped()

                                    Image(systemName: "chevron.right")
                                        .foregroundColor(.gray)
                                        .font(.system(size: 10, weight: .medium))
                                        .frame(width: 12, height: 12)
                                }
                                .frame(width: 44, height: 44)
                                .padding(.horizontal, 8)
                                .background(Color(.systemGray6))
                                .cornerRadius(10)
                            }

                            HStack(spacing: 12) {
                                // 搜索输入框
                                TextField("请输入网址或搜索关键词", text: $urlText)
                                    .textFieldStyle(PlainTextFieldStyle())
                                    .onSubmit {
                                        loadURL()
                                    }
                                    .onTapGesture {
                                        showExpandedInput()
                                    }
                                    .onReceive(viewModel.$urlString) { newURL in
                                        // 只有当用户没有在编辑时才更新地址栏
                                        if !urlText.isEmpty && urlText != newURL {
                                            // 用户正在输入，不更新
                                        } else if let newURL = newURL, !newURL.isEmpty && !isHomePage(newURL) {
                                            urlText = newURL
                                        } else if isHomePage(newURL ?? "") {
                                            // 首页不显示地址
                                            urlText = ""
                                        }
                                    }

                                // 按钮组
                                HStack(spacing: 12) {
                                    // 粘贴按钮
                                    Button(action: {
                                        showPasteMenu()
                                    }) {
                                        Image(systemName: "doc.on.clipboard")
                                            .foregroundColor(.green)
                                            .font(.system(size: 18))
                                            .frame(width: 44, height: 44)
                                            .background(Color(.systemGray5))
                                            .cornerRadius(8)
                                    }

                                    if !urlText.isEmpty {
                                        // 清除按钮
                                        Button(action: {
                                            urlText = ""
                                        }) {
                                            Image(systemName: "xmark.circle.fill")
                                                .foregroundColor(.gray)
                                                .font(.system(size: 18))
                                                .frame(width: 44, height: 44)
                                                .background(Color(.systemGray5))
                                                .cornerRadius(8)
                                        }
                                    }
                                }
                            }
                            .padding(.horizontal, 12)
                            .padding(.vertical, 10)
                            .background(Color(.systemGray6))
                            .cornerRadius(10)
                        }
                        .padding(.horizontal, 16)
                        .padding(.top, 8)
                        
                        // 导航按钮
                        HStack(spacing: 20) {
                            // 后退按钮
                            EnhancedToolbarButton(
                                id: "back",
                                icon: "chevron.left",
                                title: "后退",
                                isEnabled: viewModel.canGoBack,
                                isPressed: pressedButtonId == "back",
                                showingHints: showingToolbarButtonHints,
                                onPress: {
                                    pressedButtonId = "back"
                                },
                                onRelease: {
                                    pressedButtonId = nil
                                    viewModel.goBack()
                                }
                            )
                            
                            // 前进按钮
                            EnhancedToolbarButton(
                                id: "forward",
                                icon: "chevron.right",
                                title: "前进",
                                isEnabled: viewModel.canGoForward,
                                isPressed: pressedButtonId == "forward",
                                showingHints: showingToolbarButtonHints,
                                onPress: {
                                    pressedButtonId = "forward"
                                },
                                onRelease: {
                                    pressedButtonId = nil
                                    viewModel.goForward()
                                }
                            )
                            
                            // 刷新按钮
                            EnhancedToolbarButton(
                                id: "refresh",
                                icon: viewModel.isLoading ? "stop.fill" : "arrow.clockwise",
                                title: viewModel.isLoading ? "停止" : "刷新",
                                isEnabled: true,
                                isPressed: pressedButtonId == "refresh",
                                showingHints: showingToolbarButtonHints,
                                onPress: {
                                    pressedButtonId = "refresh"
                                },
                                onRelease: {
                                    pressedButtonId = nil
                                    viewModel.webView.reload()
                                }
                            )

                            // 主页按钮
                            EnhancedToolbarButton(
                                id: "home",
                                icon: "house.fill",
                                title: "主页",
                                isEnabled: true,
                                isPressed: pressedButtonId == "home",
                                showingHints: showingToolbarButtonHints,
                                onPress: {
                                    pressedButtonId = "home"
                                },
                                onRelease: {
                                    pressedButtonId = nil
                                    goToHomePage()
                                }
                            )

                            Spacer()
                            
                            // AI对话按钮
                            EnhancedToolbarButton(
                                id: "ai_chat",
                                icon: "brain.head.profile",
                                title: "AI对话",
                                isEnabled: true,
                                isPressed: pressedButtonId == "ai_chat",
                                showingHints: showingToolbarButtonHints,
                                onPress: {
                                    pressedButtonId = "ai_chat"
                                },
                                onRelease: {
                                    pressedButtonId = nil
                                    showAIChat()
                                }
                            )
                            
                            // 收藏按钮
                            EnhancedToolbarButton(
                                id: "favorite",
                                icon: (viewModel.urlString != nil && favoritePages.contains(viewModel.urlString!)) ? "star.fill" : "star",
                                title: "收藏",
                                isEnabled: true,
                                isPressed: pressedButtonId == "favorite",
                                showingHints: showingToolbarButtonHints,
                                onPress: {
                                    pressedButtonId = "favorite"
                                },
                                onRelease: {
                                    pressedButtonId = nil
                                    toggleFavorite()
                                }
                            )
                            
                            // 书签按钮
                            EnhancedToolbarButton(
                                id: "bookmarks",
                                icon: "book.fill",
                                title: "书签",
                                isEnabled: true,
                                isPressed: pressedButtonId == "bookmarks",
                                showingHints: showingToolbarButtonHints,
                                onPress: {
                                    pressedButtonId = "bookmarks"
                                },
                                onRelease: {
                                    pressedButtonId = nil
                                    showingBookmarks.toggle()
                                }
                            )
                            
                            // 分享按钮
                            EnhancedToolbarButton(
                                id: "share",
                                icon: "square.and.arrow.up",
                                title: "分享",
                                isEnabled: true,
                                isPressed: pressedButtonId == "share",
                                showingHints: showingToolbarButtonHints,
                                onPress: {
                                    pressedButtonId = "share"
                                },
                                onRelease: {
                                    pressedButtonId = nil
                                    shareCurrentURL()
                                }
                            )
                            
                            // 设置按钮（控制提示开关）
                            EnhancedToolbarButton(
                                id: "settings",
                                icon: "gearshape.fill",
                                title: "设置",
                                isEnabled: true,
                                isPressed: pressedButtonId == "settings",
                                showingHints: showingToolbarButtonHints,
                                onPress: {
                                    pressedButtonId = "settings"
                                },
                                onRelease: {
                                    pressedButtonId = nil
                                    showingToolbarButtonHints.toggle()
                                    showToast(showingToolbarButtonHints ? "已开启按钮提示" : "已关闭按钮提示", type: .info)
                                }
                            )
                        }
                        .padding(.horizontal, 16)
                        .padding(.bottom, 8)
                    }
                    .background(Color(.systemBackground))
                    .transition(.asymmetric(
                        insertion: .move(edge: .top).combined(with: .opacity),
                        removal: .move(edge: .top).combined(with: .opacity)
                    ))
                    .animation(.easeInOut(duration: 0.3), value: viewModel.isUIVisible)
                }
                
                // 内容区域（可滚动）
                if showingCustomHomePage {
                    GeometryReader { geometry in
                        ScrollableCustomHomePage(
                            searchQuery: $searchQuery,
                            onSearch: { query in
                                urlText = query
                                showingCustomHomePage = false
                                loadURL()
                            },
                            onPromptSelected: { prompt in
                                searchQuery = prompt
                            },
                            promptManager: promptManager,
                            availableHeight: geometry.size.height - (viewModel.isUIVisible ? 140 : 0)
                        )
                    }
                } else {
                    WebView(viewModel: viewModel)
                        .clipped()
                }
            }
            .offset(x: edgeSwipeOffset)
            .gesture(
                DragGesture(coordinateSpace: .global)
                    .onChanged { value in
                        // 只响应从左边缘开始的滑动
                        let edgeThreshold: CGFloat = 30
                        let isFromLeftEdge = value.startLocation.x < edgeThreshold

                        // 只有从左边缘开始且向右滑动才响应
                        if isFromLeftEdge && value.translation.width > 0 {
                            isEdgeSwiping = true
                            // 限制滑动距离，创建阻尼效果
                            let maxOffset: CGFloat = 100
                            let progress = min(value.translation.width / maxOffset, 1.0)
                            edgeSwipeOffset = progress * maxOffset
                        }
                    }
                    .onEnded { value in
                        let threshold: CGFloat = 80
                        let velocity = value.predictedEndLocation.x - value.location.x

                        // 判断是否应该执行返回操作
                        let shouldGoBack = (value.translation.width > threshold || velocity > 300) &&
                                         value.startLocation.x < 30 &&
                                         viewModel.canGoBack

                        if shouldGoBack {
                            // 执行返回操作
                            viewModel.webView.goBack()

                            // 添加成功反馈动画
                            withAnimation(.spring(response: 0.3, dampingFraction: 0.8)) {
                                edgeSwipeOffset = 0
                            }
                        } else {
                            // 重置位置
                            withAnimation(.spring(response: 0.4, dampingFraction: 0.8)) {
                                edgeSwipeOffset = 0
                            }
                        }

                        isEdgeSwiping = false
                    }
            )
            .navigationBarHidden(true)
            .sheet(isPresented: $showingBookmarks) {
                BookmarksView(bookmarks: $bookmarks, onBookmarkSelected: { bookmark in
                    urlText = bookmark
                    showingBookmarks = false
                    loadURL()
                })
            }
            .sheet(isPresented: $showingExpandedInput) {
                ExpandedInputView(
                    urlText: $expandedUrlText,
                    onConfirm: {
                        urlText = expandedUrlText
                        showingExpandedInput = false
                        loadURL()
                    },
                    onCancel: {
                        showingExpandedInput = false
                    }
                )
            }
            .sheet(isPresented: $showingAIChat) {
                BrowserAIChatView(
                    selectedAI: $selectedAI,
                    initialMessage: urlText
                )
            }
            .alert("提示", isPresented: $showingAlert) {
                Button("确定", role: .cancel) { }
            } message: {
                Text(alertMessage)
            }
            .onAppear {
                setupNotificationObservers()
                loadBookmarks()
                loadFavorites()
            }
            .onDisappear {
                removeNotificationObservers()
            }
        }
        .overlay(
            // 全局悬浮Prompt按钮
            VStack {
                Spacer()
                HStack {
                    Spacer()
                    if promptManager.currentPrompt != nil {
                        VStack(spacing: 8) {
                            // 管理按钮
                            Button(action: {
                                showingPromptManager = true
                            }) {
                                Image(systemName: "list.bullet")
                                    .font(.system(size: 16, weight: .medium))
                                    .foregroundColor(.white)
                                    .padding(8)
                                    .background(Color.gray)
                                    .clipShape(Circle())
                                    .shadow(color: .black.opacity(0.2), radius: 2, x: 0, y: 1)
                            }

                            // 当前Prompt按钮
                            Button(action: {
                                showingFloatingPrompt = true
                            }) {
                                VStack(spacing: 4) {
                                    Image(systemName: "wand.and.stars")
                                        .font(.system(size: 20, weight: .medium))
                                    Text(promptManager.currentPrompt?.name ?? "智能提示")
                                        .font(.caption2)
                                        .lineLimit(1)
                                }
                                .foregroundColor(.white)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 8)
                                .background(Color.green)
                                .cornerRadius(20)
                                .shadow(color: .black.opacity(0.2), radius: 4, x: 0, y: 2)
                            }
                        }
                        .padding(.trailing, 20)
                        .padding(.bottom, 100)
                    }
                }
            }
        )
        .sheet(isPresented: $showingFloatingPrompt) {
            if let currentPrompt = promptManager.currentPrompt {
                FloatingPromptView(prompt: currentPrompt.content)
            }
        }
        .sheet(isPresented: $showingPromptManager) {
            PromptManagerView(promptManager: promptManager)
        }
        .toast(isPresented: $showingToast) {
            ToastView(message: toastMessage, type: toastType)
        }
        // 新增：左侧抽屉式搜索引擎列表
        .overlay(
            ZStack {
                // 背景遮罩
                if showingSearchEngineDrawer {
                    Color.black.opacity(0.3)
                        .ignoresSafeArea()
                        .onTapGesture {
                            withAnimation(.spring(response: 0.3, dampingFraction: 0.7)) {
                                showingSearchEngineDrawer = false
                                searchEngineDrawerOffset = -300
                            }
                        }
                }
                
                // 左侧抽屉
                HStack {
                    SearchEngineDrawerView(
                        searchEngines: searchEngines,
                        selectedSearchEngine: $selectedSearchEngine,
                        isPresented: $showingSearchEngineDrawer,
                        onEngineSelected: { index in
                            withAnimation(.spring(response: 0.3, dampingFraction: 0.7)) {
                                selectedSearchEngine = index
                                showingSearchEngineDrawer = false
                                searchEngineDrawerOffset = -300
                                
                                // 如果是AI搜索引擎，直接加载对话页面
                                let engine = searchEngines[index]
                                if ["deepseek", "kimi", "doubao", "wenxin", "yuanbao", "chatglm", "tongyi", "claude", "chatgpt", "metaso", "nano"].contains(engine.id) {
                                    urlText = engine.url
                                    loadURL()
                                }
                            }
                        }
                    )
                    .offset(x: showingSearchEngineDrawer ? 0 : -300)
                    
                    Spacer()
                }
            }
        )
    }
    
    // MARK: - 方法实现
    private func loadURL() {
        let trimmedText = urlText.trimmingCharacters(in: .whitespacesAndNewlines)

        if trimmedText.isEmpty {
            return
        }

        var urlString = trimmedText
        let selectedEngine = searchEngines[selectedSearchEngine]

        // 检查是否是有效的URL
        if !urlString.hasPrefix("http://") && !urlString.hasPrefix("https://") {
            // 如果包含点号，假设是域名
            if urlString.contains(".") && !urlString.contains(" ") {
                urlString = "https://" + urlString
            } else {
                // 否则根据选择的搜索引擎处理
                switch selectedEngine.id {
                case "baidu":
                    urlString = selectedEngine.url + urlString.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!
                case "bing":
                    urlString = selectedEngine.url + urlString.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!
                case "deepseek", "kimi", "doubao", "wenxin", "yuanbao", "chatglm", "tongyi", "claude", "chatgpt", "metaso", "nano":
                    // AI聊天类搜索引擎，直接跳转到主页
                    urlString = selectedEngine.url
                default:
                    urlString = "https://www.baidu.com/s?wd=" + urlString.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!
                }
            }
        }

        // 直接加载URL，不显示中间页面
        showingCustomHomePage = false
        viewModel.loadUrl(urlString)
    }
    
    private func addToBookmarks() {
        guard let currentURL = viewModel.urlString, !currentURL.isEmpty else {
            // 显示弱提醒
            showToast("无法收藏，当前页面无效", type: .error)
            return
        }

        if !bookmarks.contains(currentURL) {
            // 添加到书签
            bookmarks.append(currentURL)
            saveBookmarks()
            showToast("已添加到书签", type: .success)
        } else {
            // 从书签中移除
            bookmarks.removeAll { $0 == currentURL }
            saveBookmarks()
            showToast("已从书签移除", type: .info)
        }
    }

    // 新增：弱提醒方法
    private func showToast(_ message: String, type: ToastType = .success) {
        toastMessage = message
        toastType = type
        showingToast = true
        
        // 3秒后自动隐藏
        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
            withAnimation(.easeInOut(duration: 0.3)) {
                showingToast = false
            }
        }
    }

    private func saveBookmarks() {
        UserDefaults.standard.set(bookmarks, forKey: "bookmarks")
    }

    private func loadBookmarks() {
        bookmarks = UserDefaults.standard.stringArray(forKey: "bookmarks") ?? []
    }

    private func goToHomePage() {
        showingCustomHomePage = true
        urlText = ""
        viewModel.loadUrl("")
    }

    private func showExpandedInput() {
        expandedUrlText = urlText
        showingExpandedInput = true
    }

    private func showPasteMenu() {
        let pasteboard = UIPasteboard.general
        let clipboardContent = pasteboard.string ?? ""
        
        let alert = UIAlertController(title: "粘贴选项", message: nil, preferredStyle: .actionSheet)
        
        if !clipboardContent.isEmpty {
            let previewText = clipboardContent.count > 20 ? String(clipboardContent.prefix(20)) + "..." : clipboardContent
            alert.addAction(UIAlertAction(title: "粘贴剪贴板内容: \(previewText)", style: .default) { _ in
                self.urlText = clipboardContent
            })
        }
        
        // 添加智能提示选项
        if let currentPrompt = promptManager.currentPrompt {
            alert.addAction(UIAlertAction(title: "使用智能提示: \(currentPrompt.name)", style: .default) { _ in
                self.urlText = currentPrompt.content
            })
        }
        
        alert.addAction(UIAlertAction(title: "取消", style: .cancel))
        
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first {
            window.rootViewController?.present(alert, animated: true)
        }
    }

    private func showAIChat() {
        showingAIChat = true
    }

    private func toggleFavorite() {
        guard let currentURL = viewModel.urlString, !currentURL.isEmpty else {
            showToast("无法收藏，当前页面无效", type: .error)
            return
        }

        if favoritePages.contains(currentURL) {
            favoritePages.remove(currentURL)
            showToast("已从收藏中移除", type: .info)
        } else {
            favoritePages.insert(currentURL)
            showToast("已添加到收藏", type: .success)
        }
        
        saveFavorites()
    }

    private func saveFavorites() {
        UserDefaults.standard.set(Array(favoritePages), forKey: "favoritePages")
    }

    private func loadFavorites() {
        let savedFavorites = UserDefaults.standard.stringArray(forKey: "favoritePages") ?? []
        favoritePages = Set(savedFavorites)
    }

    private func shareCurrentURL() {
        guard let currentURL = viewModel.urlString, !currentURL.isEmpty else {
            showToast("无法分享，当前页面无效", type: .error)
            return
        }

        let activityVC = UIActivityViewController(activityItems: [currentURL], applicationActivities: nil)
        
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first {
            window.rootViewController?.present(activityVC, animated: true)
        }
    }

    private func isHomePage(_ url: String) -> Bool {
        return url.isEmpty || url == "about:blank" || url.contains("homepage")
    }

    private func setupNotificationObservers() {
        NotificationCenter.default.addObserver(
            forName: .performSearch,
            object: nil,
            queue: .main
        ) { notification in
            if let urlString = notification.object as? String {
                self.urlText = urlString
                self.showingCustomHomePage = false
                self.loadURL()
            }
        }
    }

    private func removeNotificationObservers() {
        NotificationCenter.default.removeObserver(self)
    }
}

// MARK: - 扩展通知名称
extension Notification.Name {
    static let performSearch = Notification.Name("performSearch")
}

// MARK: - 左侧抽屉式搜索引擎列表视图
struct SearchEngineDrawerView: View {
    let searchEngines: [BrowserSearchEngine]
    @Binding var selectedSearchEngine: Int
    @Binding var isPresented: Bool
    let onEngineSelected: (Int) -> Void
    
    var body: some View {
        VStack(spacing: 0) {
            // 标题栏
            HStack {
                Text("搜索引擎")
                    .font(.system(size: 18, weight: .semibold))
                    .foregroundColor(.primary)
                
                Spacer()
                
                Button(action: {
                    withAnimation(.spring(response: 0.3, dampingFraction: 0.7)) {
                        isPresented = false
                    }
                }) {
                    Image(systemName: "xmark.circle.fill")
                        .font(.system(size: 20))
                        .foregroundColor(.gray)
                }
            }
            .padding(.horizontal, 20)
            .padding(.vertical, 16)
            .background(Color(.systemBackground))
            
            Divider()
            
            // 搜索引擎列表
            ScrollView {
                LazyVStack(spacing: 0) {
                    ForEach(Array(searchEngines.enumerated()), id: \.offset) { index, engine in
                        SearchEngineDrawerItem(
                            engine: engine,
                            isSelected: selectedSearchEngine == index,
                            onTap: {
                                onEngineSelected(index)
                            }
                        )
                    }
                }
            }
            .background(Color(.systemGroupedBackground))
        }
        .frame(width: 280)
        .background(Color(.systemBackground))
        .shadow(color: .black.opacity(0.2), radius: 10, x: 5, y: 0)
    }
}

// MARK: - 抽屉式搜索引擎项目
struct SearchEngineDrawerItem: View {
    let engine: BrowserSearchEngine
    let isSelected: Bool
    let onTap: () -> Void
    
    var body: some View {
        Button(action: onTap) {
            HStack(spacing: 12) {
                Image(systemName: engine.icon)
                    .font(.system(size: 20, weight: .medium))
                    .foregroundColor(isSelected ? .white : engine.color)
                    .frame(width: 24, height: 24)
                
                VStack(alignment: .leading, spacing: 2) {
                    Text(engine.name)
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(isSelected ? .white : .primary)
                    
                    Text(getEngineCategory(engine.id))
                        .font(.system(size: 12))
                        .foregroundColor(isSelected ? .white.opacity(0.8) : .secondary)
                }
                
                Spacer()
                
                if isSelected {
                    Image(systemName: "checkmark.circle.fill")
                        .font(.system(size: 16))
                        .foregroundColor(.white)
                }
            }
            .padding(.horizontal, 20)
            .padding(.vertical, 16)
            .background(
                RoundedRectangle(cornerRadius: 8)
                    .fill(isSelected ? engine.color : Color.clear)
            )
            .contentShape(Rectangle())
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    private func getEngineCategory(_ engineId: String) -> String {
        switch engineId {
        case "baidu", "bing":
            return "搜索"
        case "deepseek", "kimi", "doubao", "wenxin", "yuanbao", "chatglm", "tongyi", "claude", "chatgpt":
            return "AI对话"
        case "metaso", "nano":
            return "AI搜索"
        default:
            return "其他"
        }
    }
}

// MARK: - 增强工具栏按钮组件
struct EnhancedToolbarButton: View {
    let id: String
    let icon: String
    let title: String
    let isEnabled: Bool
    let isPressed: Bool
    let showingHints: Bool
    let onPress: () -> Void
    let onRelease: () -> Void
    
    var body: some View {
        VStack(spacing: 2) {
            // 按钮图标
            Image(systemName: icon)
                .font(.system(size: isPressed ? 22 : 18, weight: .medium))
                .foregroundColor(isEnabled ? (isPressed ? .white : .green) : .gray)
                .frame(width: 44, height: 44)
                .background(
                    Circle()
                        .fill(isPressed ? Color.green : Color.clear)
                        .scaleEffect(isPressed ? 1.2 : 1.0)
                )
                .animation(.easeInOut(duration: 0.1), value: isPressed)
            
            // 文字提示（仅在开启时显示）
            if showingHints {
                Text(title)
                    .font(.system(size: 10, weight: .medium))
                    .foregroundColor(isEnabled ? .primary : .secondary)
                    .opacity(isPressed ? 1.0 : 0.8)
                    .animation(.easeInOut(duration: 0.1), value: isPressed)
            }
        }
        .scaleEffect(isPressed ? 1.1 : 1.0)
        .animation(.easeInOut(duration: 0.1), value: isPressed)
        .onLongPressGesture(minimumDuration: 0, maximumDistance: 50) {
            // 长按手势，立即触发
        } onPressingChanged: { pressing in
            if pressing {
                onPress()
            } else {
                onRelease()
            }
        }
        .disabled(!isEnabled)
    }
}


